
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f7  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e3  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084c  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  00003104  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e4f  00000000  00000000  00003863  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000046b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <main>
  9e:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
		}
		if (line >= (LCDHEIGHT/8))
			return;        
}

}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	80 e7       	ldi	r24, 0x70	; 112
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <lcd_init+0x46>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_init+0x50>
 122:	00 00       	nop
 124:	8e e2       	ldi	r24, 0x2E	; 46
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	80 e7       	ldi	r24, 0x70	; 112
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <lcd_init+0x5e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_init+0x68>
 13a:	00 00       	nop
 13c:	8f e2       	ldi	r24, 0x2F	; 47
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_init+0x74>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_init+0x7a>
 14c:	00 00       	nop
 14e:	86 e2       	ldi	r24, 0x26	; 38
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 154:	08 95       	ret

00000156 <lcd_data>:
 156:	5c 9a       	sbi	0x0b, 4	; 11
 158:	27 e0       	ldi	r18, 0x07	; 7
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	5d 98       	cbi	0x0b, 5	; 11
 160:	ac 01       	movw	r20, r24
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x14>
 166:	55 95       	asr	r21
 168:	47 95       	ror	r20
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <lcd_data+0x10>
 16e:	40 ff       	sbrs	r20, 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <lcd_data+0x20>
 172:	5e 9a       	sbi	0x0b, 6	; 11
 174:	01 c0       	rjmp	.+2      	; 0x178 <lcd_data+0x22>
 176:	5e 98       	cbi	0x0b, 6	; 11
 178:	5d 9a       	sbi	0x0b, 5	; 11
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	31 09       	sbc	r19, r1
 17e:	78 f7       	brcc	.-34     	; 0x15e <lcd_data+0x8>
 180:	08 95       	ret

00000182 <lcd_set_brightness>:
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	81 e8       	ldi	r24, 0x81	; 129
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 18c:	8c 2f       	mov	r24, r28
 18e:	8f 73       	andi	r24, 0x3F	; 63
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <write_buffer>:
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f5 e0       	ldi	r31, 0x05	; 5
 1b0:	ff 2e       	mov	r15, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	ec 01       	movw	r28, r24
 1b6:	0f 2e       	mov	r0, r31
 1b8:	f0 e1       	ldi	r31, 0x10	; 16
 1ba:	cf 2e       	mov	r12, r31
 1bc:	f5 e0       	ldi	r31, 0x05	; 5
 1be:	df 2e       	mov	r13, r31
 1c0:	f0 2d       	mov	r31, r0
 1c2:	f7 01       	movw	r30, r14
 1c4:	80 81       	ld	r24, Z
 1c6:	f2 e0       	ldi	r31, 0x02	; 2
 1c8:	ef 0e       	add	r14, r31
 1ca:	f1 1c       	adc	r15, r1
 1cc:	80 6b       	ori	r24, 0xB0	; 176
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	80 e1       	ldi	r24, 0x10	; 16
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1de:	80 ee       	ldi	r24, 0xE0	; 224
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
 1ea:	8e 01       	movw	r16, r28
 1ec:	00 58       	subi	r16, 0x80	; 128
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
 1f0:	89 91       	ld	r24, Y+
 1f2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
 1f6:	c0 17       	cp	r28, r16
 1f8:	d1 07       	cpc	r29, r17
 1fa:	d1 f7       	brne	.-12     	; 0x1f0 <write_buffer+0x58>
 1fc:	e8 01       	movw	r28, r16
 1fe:	ce 14       	cp	r12, r14
 200:	df 04       	cpc	r13, r15
 202:	f9 f6       	brne	.-66     	; 0x1c2 <write_buffer+0x2a>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	08 95       	ret

00000216 <clear_buffer>:
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	34 e0       	ldi	r19, 0x04	; 4
 21a:	fc 01       	movw	r30, r24
 21c:	a9 01       	movw	r20, r18
 21e:	11 92       	st	Z+, r1
 220:	41 50       	subi	r20, 0x01	; 1
 222:	50 40       	sbci	r21, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <clear_buffer+0x8>
 226:	08 95       	ret

00000228 <setpixel>:
 228:	34 2f       	mov	r19, r20
 22a:	36 95       	lsr	r19
 22c:	36 95       	lsr	r19
 22e:	36 95       	lsr	r19
 230:	e6 2f       	mov	r30, r22
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	50 e8       	ldi	r21, 0x80	; 128
 236:	35 9f       	mul	r19, r21
 238:	e0 0d       	add	r30, r0
 23a:	f1 1d       	adc	r31, r1
 23c:	11 24       	eor	r1, r1
 23e:	e8 0f       	add	r30, r24
 240:	f9 1f       	adc	r31, r25
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	40 95       	com	r20
 248:	50 95       	com	r21
 24a:	47 70       	andi	r20, 0x07	; 7
 24c:	55 27       	eor	r21, r21
 24e:	02 c0       	rjmp	.+4      	; 0x254 <setpixel+0x2c>
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	4a 95       	dec	r20
 256:	e2 f7       	brpl	.-8      	; 0x250 <setpixel+0x28>
 258:	80 81       	ld	r24, Z
 25a:	28 2b       	or	r18, r24
 25c:	20 83       	st	Z, r18
 25e:	08 95       	ret

00000260 <drawline>:

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
 260:	6f 92       	push	r6
 262:	7f 92       	push	r7
 264:	8f 92       	push	r8
 266:	9f 92       	push	r9
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	5c 01       	movw	r10, r24
 27e:	c6 2f       	mov	r28, r22
 280:	14 2f       	mov	r17, r20
 282:	f2 2e       	mov	r15, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 284:	80 2f       	mov	r24, r16
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	84 1b       	sub	r24, r20
 28a:	91 09       	sbc	r25, r1
 28c:	6c 01       	movw	r12, r24
 28e:	22 f4       	brpl	.+8      	; 0x298 <drawline+0x38>
 290:	cc 24       	eor	r12, r12
 292:	dd 24       	eor	r13, r13
 294:	c8 1a       	sub	r12, r24
 296:	d9 0a       	sbc	r13, r25
 298:	8f 2d       	mov	r24, r15
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	8c 1b       	sub	r24, r28
 29e:	91 09       	sbc	r25, r1
 2a0:	4c 01       	movw	r8, r24
 2a2:	22 f4       	brpl	.+8      	; 0x2ac <drawline+0x4c>
 2a4:	88 24       	eor	r8, r8
 2a6:	99 24       	eor	r9, r9
 2a8:	88 1a       	sub	r8, r24
 2aa:	99 0a       	sbc	r9, r25
	if (steep) 
 2ac:	8c 14       	cp	r8, r12
 2ae:	9d 04       	cpc	r9, r13
 2b0:	34 f4       	brge	.+12     	; 0x2be <drawline+0x5e>
 2b2:	8f 2d       	mov	r24, r15
	{
		swap(x0, y0);
		swap(x1, y1);
 2b4:	f0 2e       	mov	r15, r16
 2b6:	08 2f       	mov	r16, r24
}

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
 2b8:	8c 2f       	mov	r24, r28
	{
		swap(x0, y0);
 2ba:	c1 2f       	mov	r28, r17
 2bc:	18 2f       	mov	r17, r24
		swap(x1, y1);
	}
	if (x0 > x1) 
 2be:	fc 16       	cp	r15, r28
 2c0:	20 f5       	brcc	.+72     	; 0x30a <drawline+0xaa>
 2c2:	81 2f       	mov	r24, r17
	{
		swap(x0, x1);
		swap(y0, y1);
 2c4:	10 2f       	mov	r17, r16
 2c6:	08 2f       	mov	r16, r24
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
	}
	if (x0 > x1) 
 2c8:	8c 2f       	mov	r24, r28
	{
		swap(x0, x1);
 2ca:	cf 2d       	mov	r28, r15
 2cc:	f8 2e       	mov	r15, r24
 2ce:	1d c0       	rjmp	.+58     	; 0x30a <drawline+0xaa>
	else 
	{
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
 2d0:	fc 16       	cp	r15, r28
 2d2:	70 f1       	brcs	.+92     	; 0x330 <drawline+0xd0>
	{
		ystep = 1;
	} 
	else 
	{
		ystep = -1;
 2d4:	0f ef       	ldi	r16, 0xFF	; 255
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <drawline+0x7a>
	int8_t err = dx / 2;
	int8_t ystep;

	if (y0 < y1) 
	{
		ystep = 1;
 2d8:	01 e0       	ldi	r16, 0x01	; 1
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
	{
		if (steep) 
 2da:	8c 14       	cp	r8, r12
 2dc:	9d 04       	cpc	r9, r13
 2de:	3c f4       	brge	.+14     	; 0x2ee <drawline+0x8e>
		{
			setpixel(buff, y0, x0, color);
 2e0:	2e 2d       	mov	r18, r14
 2e2:	4c 2f       	mov	r20, r28
 2e4:	61 2f       	mov	r22, r17
 2e6:	c5 01       	movw	r24, r10
 2e8:	0e 94 14 01 	call	0x228	; 0x228 <setpixel>
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <drawline+0x9a>
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
 2ee:	2e 2d       	mov	r18, r14
 2f0:	41 2f       	mov	r20, r17
 2f2:	6c 2f       	mov	r22, r28
 2f4:	c5 01       	movw	r24, r10
 2f6:	0e 94 14 01 	call	0x228	; 0x228 <setpixel>
		}
		err -= dy;
 2fa:	d7 19       	sub	r29, r7
		if (err < 0) 
 2fc:	12 f4       	brpl	.+4      	; 0x302 <drawline+0xa2>
		{
			y0 += ystep;
 2fe:	10 0f       	add	r17, r16
			err += dx;
 300:	d6 0d       	add	r29, r6
	else 
	{
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
 302:	cf 5f       	subi	r28, 0xFF	; 255
 304:	fc 16       	cp	r15, r28
 306:	48 f7       	brcc	.-46     	; 0x2da <drawline+0x7a>
 308:	13 c0       	rjmp	.+38     	; 0x330 <drawline+0xd0>
		swap(x0, x1);
		swap(y0, y1);
	}

	uint8_t dx, dy;
	dx = x1 - x0;
 30a:	6f 2c       	mov	r6, r15
 30c:	6c 1a       	sub	r6, r28
	dy = abs(y1 - y0);
 30e:	20 2f       	mov	r18, r16
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	21 1b       	sub	r18, r17
 314:	31 09       	sbc	r19, r1
 316:	c9 01       	movw	r24, r18
 318:	99 23       	and	r25, r25
 31a:	24 f4       	brge	.+8      	; 0x324 <drawline+0xc4>
 31c:	88 27       	eor	r24, r24
 31e:	99 27       	eor	r25, r25
 320:	82 1b       	sub	r24, r18
 322:	93 0b       	sbc	r25, r19
 324:	78 2e       	mov	r7, r24

	int8_t err = dx / 2;
 326:	d6 2d       	mov	r29, r6
 328:	d6 95       	lsr	r29
	int8_t ystep;

	if (y0 < y1) 
 32a:	10 17       	cp	r17, r16
 32c:	a8 f2       	brcs	.-86     	; 0x2d8 <drawline+0x78>
 32e:	d0 cf       	rjmp	.-96     	; 0x2d0 <drawline+0x70>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	bf 90       	pop	r11
 342:	af 90       	pop	r10
 344:	9f 90       	pop	r9
 346:	8f 90       	pop	r8
 348:	7f 90       	pop	r7
 34a:	6f 90       	pop	r6
 34c:	08 95       	ret

0000034e <fillrect>:


// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	5c 01       	movw	r10, r24
 364:	c6 2f       	mov	r28, r22
 366:	14 2f       	mov	r17, r20
 368:	fe 2c       	mov	r15, r14
	
	for(uint8_t i = x; i <= x+w; i++)
 36a:	86 2f       	mov	r24, r22
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	6c 01       	movw	r12, r24
 370:	c2 0e       	add	r12, r18
 372:	d1 1c       	adc	r13, r1
 374:	c8 16       	cp	r12, r24
 376:	d9 06       	cpc	r13, r25
 378:	84 f0       	brlt	.+32     	; 0x39a <fillrect+0x4c>
	{
		drawline(buff, i, y, i, y+h, color);
 37a:	d4 2f       	mov	r29, r20
 37c:	d0 0f       	add	r29, r16
 37e:	ef 2c       	mov	r14, r15
 380:	0d 2f       	mov	r16, r29
 382:	2c 2f       	mov	r18, r28
 384:	41 2f       	mov	r20, r17
 386:	6c 2f       	mov	r22, r28
 388:	c5 01       	movw	r24, r10
 38a:	0e 94 30 01 	call	0x260	; 0x260 <drawline>


// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for(uint8_t i = x; i <= x+w; i++)
 38e:	cf 5f       	subi	r28, 0xFF	; 255
 390:	8c 2f       	mov	r24, r28
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	c8 16       	cp	r12, r24
 396:	d9 06       	cpc	r13, r25
 398:	94 f7       	brge	.-28     	; 0x37e <fillrect+0x30>
	{
		drawline(buff, i, y, i, y+h, color);
	}
	
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	08 95       	ret

000003b0 <main>:
#define BLACK 0x000001

char displayChar = 0;

int main(void)
{
 3b0:	ef 92       	push	r14
 3b2:	0f 93       	push	r16
	//setting up the gpio for backlight
	DDRD |= 0x80;
 3b4:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
 3b6:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
 3bc:	84 b1       	in	r24, 0x04	; 4
 3be:	85 60       	ori	r24, 0x05	; 5
 3c0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
 3c2:	85 b1       	in	r24, 0x05	; 5
 3c4:	8a 7f       	andi	r24, 0xFA	; 250
 3c6:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
 3c8:	85 b1       	in	r24, 0x05	; 5
 3ca:	85 b9       	out	0x05, r24	; 5
	
	//lcd initialisation
	lcd_init();
 3cc:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 3d0:	8f ea       	ldi	r24, 0xAF	; 175
 3d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 3d6:	88 e1       	ldi	r24, 0x18	; 24
 3d8:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_set_brightness>
	write_buffer(buff);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	0e 94 cc 00 	call	0x198	; 0x198 <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	83 ed       	ldi	r24, 0xD3	; 211
 3e8:	90 e3       	ldi	r25, 0x30	; 48
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x3a>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x44>
 3f4:	00 00       	nop
	_delay_ms(1000);
	clear_buffer(buff);
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 0b 01 	call	0x216	; 0x216 <clear_buffer>
		
// 		unsigned char word[] = "home" ;
// 		drawstring(buff, 0, 2, word);
		
//		drawrect(buff, 0,0, 80, 60, BLACK);
		fillrect(buff, 0,0, 80, 60, BLACK);
 3fe:	ee 24       	eor	r14, r14
 400:	e3 94       	inc	r14
 402:	0c e3       	ldi	r16, 0x3C	; 60
 404:	20 e5       	ldi	r18, 0x50	; 80
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 a7 01 	call	0x34e	; 0x34e <fillrect>

		write_buffer(buff);
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 cc 00 	call	0x198	; 0x198 <write_buffer>
	}
	
	
}
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0f 91       	pop	r16
 420:	ef 90       	pop	r14
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
