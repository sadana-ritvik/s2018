
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  0000041c  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013bf  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e3  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c8  00000000  00000000  00002672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c62  00000000  00000000  0000355f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000041c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  9e:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
		}
		if (line >= (LCDHEIGHT/8))
			return;        
}

}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:
 21c:	34 2f       	mov	r19, r20
 21e:	36 95       	lsr	r19
 220:	36 95       	lsr	r19
 222:	36 95       	lsr	r19
 224:	e6 2f       	mov	r30, r22
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	50 e8       	ldi	r21, 0x80	; 128
 22a:	35 9f       	mul	r19, r21
 22c:	e0 0d       	add	r30, r0
 22e:	f1 1d       	adc	r31, r1
 230:	11 24       	eor	r1, r1
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	40 95       	com	r20
 23c:	50 95       	com	r21
 23e:	47 70       	andi	r20, 0x07	; 7
 240:	55 27       	eor	r21, r21
 242:	02 c0       	rjmp	.+4      	; 0x248 <setpixel+0x2c>
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	4a 95       	dec	r20
 24a:	e2 f7       	brpl	.-8      	; 0x244 <setpixel+0x28>
 24c:	80 81       	ld	r24, Z
 24e:	28 2b       	or	r18, r24
 250:	20 83       	st	Z, r18
 252:	08 95       	ret

00000254 <drawline>:

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
 254:	6f 92       	push	r6
 256:	7f 92       	push	r7
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	5c 01       	movw	r10, r24
 272:	c6 2f       	mov	r28, r22
 274:	14 2f       	mov	r17, r20
 276:	f2 2e       	mov	r15, r18
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
 278:	80 2f       	mov	r24, r16
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	84 1b       	sub	r24, r20
 27e:	91 09       	sbc	r25, r1
 280:	6c 01       	movw	r12, r24
 282:	22 f4       	brpl	.+8      	; 0x28c <drawline+0x38>
 284:	cc 24       	eor	r12, r12
 286:	dd 24       	eor	r13, r13
 288:	c8 1a       	sub	r12, r24
 28a:	d9 0a       	sbc	r13, r25
 28c:	8f 2d       	mov	r24, r15
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	8c 1b       	sub	r24, r28
 292:	91 09       	sbc	r25, r1
 294:	4c 01       	movw	r8, r24
 296:	22 f4       	brpl	.+8      	; 0x2a0 <drawline+0x4c>
 298:	88 24       	eor	r8, r8
 29a:	99 24       	eor	r9, r9
 29c:	88 1a       	sub	r8, r24
 29e:	99 0a       	sbc	r9, r25
	if (steep) 
 2a0:	8c 14       	cp	r8, r12
 2a2:	9d 04       	cpc	r9, r13
 2a4:	34 f4       	brge	.+12     	; 0x2b2 <drawline+0x5e>
 2a6:	8f 2d       	mov	r24, r15
	{
		swap(x0, y0);
		swap(x1, y1);
 2a8:	f0 2e       	mov	r15, r16
 2aa:	08 2f       	mov	r16, r24
}

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
	uint8_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) 
 2ac:	8c 2f       	mov	r24, r28
	{
		swap(x0, y0);
 2ae:	c1 2f       	mov	r28, r17
 2b0:	18 2f       	mov	r17, r24
		swap(x1, y1);
	}
	if (x0 > x1) 
 2b2:	fc 16       	cp	r15, r28
 2b4:	20 f5       	brcc	.+72     	; 0x2fe <drawline+0xaa>
 2b6:	81 2f       	mov	r24, r17
	{
		swap(x0, x1);
		swap(y0, y1);
 2b8:	10 2f       	mov	r17, r16
 2ba:	08 2f       	mov	r16, r24
	if (steep) 
	{
		swap(x0, y0);
		swap(x1, y1);
	}
	if (x0 > x1) 
 2bc:	8c 2f       	mov	r24, r28
	{
		swap(x0, x1);
 2be:	cf 2d       	mov	r28, r15
 2c0:	f8 2e       	mov	r15, r24
 2c2:	1d c0       	rjmp	.+58     	; 0x2fe <drawline+0xaa>
	else 
	{
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
 2c4:	fc 16       	cp	r15, r28
 2c6:	70 f1       	brcs	.+92     	; 0x324 <drawline+0xd0>
	{
		ystep = 1;
	} 
	else 
	{
		ystep = -1;
 2c8:	0f ef       	ldi	r16, 0xFF	; 255
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <drawline+0x7a>
	int8_t err = dx / 2;
	int8_t ystep;

	if (y0 < y1) 
	{
		ystep = 1;
 2cc:	01 e0       	ldi	r16, 0x01	; 1
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
	{
		if (steep) 
 2ce:	8c 14       	cp	r8, r12
 2d0:	9d 04       	cpc	r9, r13
 2d2:	3c f4       	brge	.+14     	; 0x2e2 <drawline+0x8e>
		{
			setpixel(buff, y0, x0, color);
 2d4:	2e 2d       	mov	r18, r14
 2d6:	4c 2f       	mov	r20, r28
 2d8:	61 2f       	mov	r22, r17
 2da:	c5 01       	movw	r24, r10
 2dc:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <drawline+0x9a>
		} 
		else 
		{
			setpixel(buff, x0, y0, color);
 2e2:	2e 2d       	mov	r18, r14
 2e4:	41 2f       	mov	r20, r17
 2e6:	6c 2f       	mov	r22, r28
 2e8:	c5 01       	movw	r24, r10
 2ea:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
		}
		err -= dy;
 2ee:	d7 19       	sub	r29, r7
		if (err < 0) 
 2f0:	12 f4       	brpl	.+4      	; 0x2f6 <drawline+0xa2>
		{
			y0 += ystep;
 2f2:	10 0f       	add	r17, r16
			err += dx;
 2f4:	d6 0d       	add	r29, r6
	else 
	{
		ystep = -1;
	}

	for (; x0<=x1; x0++) 
 2f6:	cf 5f       	subi	r28, 0xFF	; 255
 2f8:	fc 16       	cp	r15, r28
 2fa:	48 f7       	brcc	.-46     	; 0x2ce <drawline+0x7a>
 2fc:	13 c0       	rjmp	.+38     	; 0x324 <drawline+0xd0>
		swap(x0, x1);
		swap(y0, y1);
	}

	uint8_t dx, dy;
	dx = x1 - x0;
 2fe:	6f 2c       	mov	r6, r15
 300:	6c 1a       	sub	r6, r28
	dy = abs(y1 - y0);
 302:	20 2f       	mov	r18, r16
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	21 1b       	sub	r18, r17
 308:	31 09       	sbc	r19, r1
 30a:	c9 01       	movw	r24, r18
 30c:	99 23       	and	r25, r25
 30e:	24 f4       	brge	.+8      	; 0x318 <drawline+0xc4>
 310:	88 27       	eor	r24, r24
 312:	99 27       	eor	r25, r25
 314:	82 1b       	sub	r24, r18
 316:	93 0b       	sbc	r25, r19
 318:	78 2e       	mov	r7, r24

	int8_t err = dx / 2;
 31a:	d6 2d       	mov	r29, r6
 31c:	d6 95       	lsr	r29
	int8_t ystep;

	if (y0 < y1) 
 31e:	10 17       	cp	r17, r16
 320:	a8 f2       	brcs	.-86     	; 0x2cc <drawline+0x78>
 322:	d0 cf       	rjmp	.-96     	; 0x2c4 <drawline+0x70>
		{
			y0 += ystep;
			err += dx;
		}
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	bf 90       	pop	r11
 336:	af 90       	pop	r10
 338:	9f 90       	pop	r9
 33a:	8f 90       	pop	r8
 33c:	7f 90       	pop	r7
 33e:	6f 90       	pop	r6
 340:	08 95       	ret

00000342 <fillrect>:


// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
 342:	af 92       	push	r10
 344:	bf 92       	push	r11
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	5c 01       	movw	r10, r24
 358:	c6 2f       	mov	r28, r22
 35a:	14 2f       	mov	r17, r20
 35c:	fe 2c       	mov	r15, r14
	
	for(uint8_t i = x; i <= x+w; i++)
 35e:	86 2f       	mov	r24, r22
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	6c 01       	movw	r12, r24
 364:	c2 0e       	add	r12, r18
 366:	d1 1c       	adc	r13, r1
 368:	c8 16       	cp	r12, r24
 36a:	d9 06       	cpc	r13, r25
 36c:	84 f0       	brlt	.+32     	; 0x38e <fillrect+0x4c>
	{
		drawline(buff, i, y, i, y+h, color);
 36e:	d4 2f       	mov	r29, r20
 370:	d0 0f       	add	r29, r16
 372:	ef 2c       	mov	r14, r15
 374:	0d 2f       	mov	r16, r29
 376:	2c 2f       	mov	r18, r28
 378:	41 2f       	mov	r20, r17
 37a:	6c 2f       	mov	r22, r28
 37c:	c5 01       	movw	r24, r10
 37e:	0e 94 2a 01 	call	0x254	; 0x254 <drawline>


// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for(uint8_t i = x; i <= x+w; i++)
 382:	cf 5f       	subi	r28, 0xFF	; 255
 384:	8c 2f       	mov	r24, r28
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	c8 16       	cp	r12, r24
 38a:	d9 06       	cpc	r13, r25
 38c:	94 f7       	brge	.-28     	; 0x372 <fillrect+0x30>
	{
		drawline(buff, i, y, i, y+h, color);
	}
	
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	08 95       	ret

000003a4 <main>:
#define BLACK 0x000001

char displayChar = 0;

int main(void)
{
 3a4:	ef 92       	push	r14
 3a6:	0f 93       	push	r16
	//setting up the gpio for backlight
	DDRD |= 0x80;
 3a8:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
 3aa:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
 3ac:	8b b1       	in	r24, 0x0b	; 11
 3ae:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
 3b0:	84 b1       	in	r24, 0x04	; 4
 3b2:	85 60       	ori	r24, 0x05	; 5
 3b4:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
 3b6:	85 b1       	in	r24, 0x05	; 5
 3b8:	8a 7f       	andi	r24, 0xFA	; 250
 3ba:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
 3bc:	85 b1       	in	r24, 0x05	; 5
 3be:	85 b9       	out	0x05, r24	; 5
	
	//lcd initialisation
	lcd_init();
 3c0:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 3c4:	8f ea       	ldi	r24, 0xAF	; 175
 3c6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 3ca:	88 e1       	ldi	r24, 0x18	; 24
 3cc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d8:	2f ef       	ldi	r18, 0xFF	; 255
 3da:	83 ed       	ldi	r24, 0xD3	; 211
 3dc:	90 e3       	ldi	r25, 0x30	; 48
 3de:	21 50       	subi	r18, 0x01	; 1
 3e0:	80 40       	sbci	r24, 0x00	; 0
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x3a>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <main+0x44>
 3e8:	00 00       	nop
	_delay_ms(1000);
	clear_buffer(buff);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
		
// 		unsigned char word[] = "home" ;
// 		drawstring(buff, 0, 2, word);
		
//		drawrect(buff, 0,0, 80, 60, BLACK);
		fillrect(buff, 0,0, 80, 60, BLACK);
 3f2:	ee 24       	eor	r14, r14
 3f4:	e3 94       	inc	r14
 3f6:	0c e3       	ldi	r16, 0x3C	; 60
 3f8:	20 e5       	ldi	r18, 0x50	; 80
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 a1 01 	call	0x342	; 0x342 <fillrect>

		write_buffer(buff);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	}
	
	
}
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0f 91       	pop	r16
 414:	ef 90       	pop	r14
 416:	08 95       	ret

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
